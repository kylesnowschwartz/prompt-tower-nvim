-- lua/prompt-tower/config.lua
-- Configuration management for prompt-tower.nvim

local M = {}

-- Default configuration
local defaults = {
  -- File discovery settings
  ignore_patterns = {
    '.git',
    'node_modules',
    '.DS_Store',
    '*.pyc',
    '__pycache__',
    '.pytest_cache',
    '.venv',
    'venv',
    'target', -- Rust/Java
    'build',
    'dist',
    '.next',
    '.nuxt',
  },
  use_gitignore = true,
  use_towerignore = true,
  max_file_size_kb = 1024, -- 1MB limit
  
  -- Context generation settings
  output_format = {
    block_template = '<file path="{filepath}">\n{content}\n</file>',
    separator = '\n\n',
    include_tree = true,
    tree_template = '<project_tree>\n{tree}\n</project_tree>\n\n',
    wrapper_template = '<!-- Generated by prompt-tower.nvim -->\n<!-- {file_count} files selected -->\n\n{tree_block}{file_blocks}',
  },
  
  -- Token counting settings (basic estimation for now)
  token_estimation = {
    chars_per_token = 4, -- Rough estimation
    show_warnings = true,
    warning_threshold = 8000, -- tokens
  },
  
  -- UI settings
  ui = {
    border = 'rounded',
    width = 0.8,
    height = 0.8,
    title = 'Prompt Tower',
    show_help = true,
  },
  
  -- Keymaps
  keymaps = {
    toggle_selection = '<Space>',
    select_all = 'A',
    clear_all = 'C',
    generate_context = '<CR>',
    quit = 'q',
    help = '?',
  },
  
  -- Clipboard settings
  clipboard = {
    register = '+', -- System clipboard
    notify_on_copy = true,
  },
}

-- Current configuration (starts as copy of defaults)
local current_config = vim.deepcopy(defaults)

--- Setup configuration with user options
--- @param opts table? User configuration options
function M.setup(opts)
  vim.validate('opts', opts or {}, 'table')
  
  -- Deep merge user options with defaults
  current_config = vim.tbl_deep_extend('force', current_config, opts or {})
  
  -- Validate configuration
  M.validate()
end

--- Validate current configuration
--- @return boolean success True if configuration is valid
function M.validate()
  local config = current_config
  
  -- Validate ignore patterns
  if config.ignore_patterns then
    vim.validate('ignore_patterns', config.ignore_patterns, 'table')
    for i, pattern in ipairs(config.ignore_patterns) do
      vim.validate(string.format('ignore_patterns[%d]', i), pattern, 'string')
    end
  end
  
  -- Validate max file size
  if config.max_file_size_kb then
    vim.validate('max_file_size_kb', config.max_file_size_kb, 'number')
    if config.max_file_size_kb <= 0 then
      error('max_file_size_kb must be positive')
    end
  end
  
  -- Validate output format templates
  if config.output_format then
    vim.validate('output_format.block_template', config.output_format.block_template, 'string')
    vim.validate('output_format.separator', config.output_format.separator, 'string')
  end
  
  -- Validate UI settings
  if config.ui then
    if config.ui.width then
      vim.validate('ui.width', config.ui.width, 'number')
      if config.ui.width <= 0 or config.ui.width > 1 then
        error('ui.width must be between 0 and 1')
      end
    end
    if config.ui.height then
      vim.validate('ui.height', config.ui.height, 'number')
      if config.ui.height <= 0 or config.ui.height > 1 then
        error('ui.height must be between 0 and 1')
      end
    end
  end
  
  -- Validate clipboard register
  if config.clipboard and config.clipboard.register then
    vim.validate('clipboard.register', config.clipboard.register, 'string')
    if not vim.regex([[\v^[+*"a-zA-Z0-9]$]]):match_str(config.clipboard.register) then
      error('clipboard.register must be a valid Vim register')
    end
  end
  
  return true
end

--- Get current configuration
--- @return table Current configuration
function M.get()
  return current_config
end

--- Get a specific configuration value
--- @param key string Configuration key (supports dot notation)
--- @return any Configuration value
function M.get_value(key)
  vim.validate('key', key, 'string')
  
  local keys = vim.split(key, '.', { plain = true })
  local value = current_config
  
  for _, k in ipairs(keys) do
    if type(value) ~= 'table' or value[k] == nil then
      return nil
    end
    value = value[k]
  end
  
  return value
end

--- Set a specific configuration value
--- @param key string Configuration key (supports dot notation)
--- @param value any Configuration value
function M.set_value(key, value)
  vim.validate('key', key, 'string')
  
  local keys = vim.split(key, '.', { plain = true })
  local target = current_config
  
  -- Navigate to parent of target key
  for i = 1, #keys - 1 do
    local k = keys[i]
    if type(target[k]) ~= 'table' then
      target[k] = {}
    end
    target = target[k]
  end
  
  -- Set the value
  target[keys[#keys]] = value
  
  -- Re-validate configuration
  M.validate()
end

--- Get default configuration
--- @return table Default configuration
function M.get_defaults()
  return vim.deepcopy(defaults)
end

--- Reset configuration to defaults
function M.reset()
  current_config = vim.deepcopy(defaults)
end

--- Export configuration for debugging
--- @return string Configuration as string
function M.export()
  return vim.inspect(current_config)
end

return M